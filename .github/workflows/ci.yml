name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Get Ninja binary
      run: |
        sudo wget -qO /usr/local/bin/ninja.gz https://github.com/ninja-build/ninja/releases/latest/download/ninja-linux.zip
    
  
    - name: Install Ninja
      run: >
        sudo gunzip /usr/local/bin/ninja.gz;
        sudo chmod a+x /usr/local/bin/ninja

    - name: Get existing LLVM Builds
      run: |
        sudo find /bin/ -type f,l -name "clang*"

    - name: Get existing GCC Builds
      run: |
        sudo find /bin/ -type f,l -name "gcc*"

    - name: install LLVM
      run: >
        wget https://apt.llvm.org/llvm.sh;
        chmod +x llvm.sh;
        sudo ./llvm.sh 17 all
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake ${{ github.workspace }} -B ${{ steps.strings.outputs.build-output-dir }} -G "Ninja"
        -DCMAKE_CXX_COMPILER="clang++-17"
        -DCMAKE_C_COMPILER="clang-17"
        -DCMAKE_BUILD_TYPE="Debug"

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config "Debug"

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config "Debug"

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Configure CMake
        run: >
          cmake ${{ github.workspace }} -B ${{ github.workspace }}/build -G "Visual Studio 17 2022" -A x64
      
      - name: Build
        run: |
          cmake --build ${{ github.workspace }}/build